// Main Game Class
class BulletHellShooterGame : Game
{
    // Game States
    enum GameState { StartMenu, Playing, GameOver }

    // Game Variables
    GameState currentState;
    Player player;
    List<Enemy> enemies;
    Scorecard scorecard;
    Timer gameTimer;

    // Initialize Game
    void Initialize()
    {
        currentState = GameState.StartMenu;
        player = new Player();
        enemies = new List<Enemy>();
        scorecard = new Scorecard();
        gameTimer = new Timer();
    }

    // Load Content
    void LoadContent()
    {
        // Load player, enemy sprites, sounds, etc.
    }

    // Update Game
    void Update(GameTime gameTime)
    {
        switch (currentState)
        {
            case GameState.StartMenu:
                UpdateStartMenu();
                break;
            case GameState.Playing:
                UpdatePlaying(gameTime);
                break;
            case GameState.GameOver:
                UpdateGameOver();
                break;
        }
    }

    // Draw Game
    void Draw(GameTime gameTime)
    {
        switch (currentState)
        {
            case GameState.StartMenu:
                DrawStartMenu();
                break;
            case GameState.Playing:
                DrawPlaying();
                break;
            case GameState.GameOver:
                DrawGameOver();
                break;
        }
    }

    // Start Menu Logic
    void UpdateStartMenu()
    {
        // Check for player input to start the game or exit
        if (StartButtonPressed)
        {
            currentState = GameState.Playing;
            StartGame();
        }
        else if (ExitButtonPressed)
        {
            ExitGame();
        }
    }

    // Playing State Logic
    void UpdatePlaying(GameTime gameTime)
    {
        // Update player
        player.Update(gameTime);

        // Update enemies and bosses
        foreach (var enemy in enemies)
        {
            enemy.Update(gameTime);
        }

        // Check for collisions
        CheckCollisions();

        // Update game timer and phase transitions
        gameTimer.Update(gameTime);
        HandlePhaseTransitions();

        // Check for game over condition
        if (player.Health <= 0)
        {
            currentState = GameState.GameOver;
        }
    }

    // Game Over State Logic
    void UpdateGameOver()
    {
        // Check for player input to restart or exit
        if (RestartButtonPressed)
        {
            currentState = GameState.Playing;
            StartGame();
        }
        else if (ExitButtonPressed)
        {
            ExitGame();
        }
    }

    // Start Game
    void StartGame()
    {
        player.Reset();
        enemies.Clear();
        scorecard.Reset();
        gameTimer.Reset();
        StartPhase1();
    }

    // Handle Phase Transitions
    void HandlePhaseTransitions()
    {
        if (gameTimer.ElapsedTime >= 0:03 && gameTimer.ElapsedTime < 0:33)
        {
            // Phase 1: Regular Grunts
            if (!phase1Started)
            {
                StartPhase1();
            }
        }
        else if (gameTimer.ElapsedTime >= 0:36 && gameTimer.ElapsedTime < 1:26)
        {
            // Phase 2: First Boss Fight
            if (!phase2Started)
            {
                StartPhase2();
            }
        }
        else if (gameTimer.ElapsedTime >= 1:29 && gameTimer.ElapsedTime < 2:00)
        {
            // Phase 3: Additional Grunts
            if (!phase3Started)
            {
                StartPhase3();
            }
        }
        else if (gameTimer.ElapsedTime >= 2:03 && gameTimer.ElapsedTime < 2:53)
        {
            // Phase 4: Final Boss Fight
            if (!phase4Started)
            {
                StartPhase4();
            }
        }
    }

    // Start Phase 1: Regular Grunts
    void StartPhase1()
    {
        phase1Started = true;
        for (int i = 0; i < 5; i++)
        {
            enemies.Add(EnemyFactory.CreateEnemy("RegularEnemyA"));
        }
    }

    // Start Phase 2: First Boss Fight
    void StartPhase2()
    {
        phase2Started = true;
        bosses.Add(EnemyFactory.CreateEnemy("FirstBoss"));
    }

    // Start Phase 3: Additional Grunts
    void StartPhase3()
    {
        phase3Started = true;
        for (int i = 0; i < 8; i++)
        {
            enemies.Add(EnemyFactory.CreateEnemy("RegularEnemyB"));
        }
    }

    // Start Phase 4: Final Boss Fight
    void StartPhase4()
    {
        phase4Started = true;
        bosses.Add(EnemyFactory.CreateEnemy("FinalBoss"));
    }

    // Check Collisions
    void CheckCollisions()
    {
        // Check player bullets vs enemies
        foreach (var enemy in enemies)
        {
            if (player.BulletsCollideWith(enemy))
            {
                enemy.TakeDamage();
                scorecard.AddScore(enemy.ScoreValue);
            }
        }

        // Check enemy bullets vs player
        foreach (var enemy in enemies)
        {
            if (enemy.BulletsCollideWith(player))
            {
                player.TakeDamage();
            }
        }

        // Check boss bullets vs player
        foreach (var boss in bosses)
        {
            if (boss.BulletsCollideWith(player))
            {
                player.TakeDamage();
            }
        }
    }
}
