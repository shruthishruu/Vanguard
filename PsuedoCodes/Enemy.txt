// Enemy Base Class
abstract class Enemy : GameEntity
{
    int Health;
    Vector2 Position;
    List<Bullet> Bullets;

    abstract void Update(GameTime gameTime);
    abstract void TakeDamage();
}

// Regular Enemy A
class RegularEnemyA : Enemy
{
    void Update(GameTime gameTime)
    {
        // Move diagonally
        // Shoot bullets diagonally
    }

    void TakeDamage()
    {
        Health--;
        if (Health <= 0)
        {
            // Handle enemy death
        }
    }
}

// Regular Enemy B
class RegularEnemyB : Enemy
{
    void Update(GameTime gameTime)
    {
        // Move diagonally
        // Shoot bullets diagonally
    }

    void TakeDamage()
    {
        Health--;
        if (Health <= 0)
        {
            // Handle enemy death
        }
    }
}

// First Boss
class FirstBoss : Enemy
{
    void Update(GameTime gameTime)
    {
        // Move in a pattern
        // Shoot bullets vertically and horizontally
    }

    void TakeDamage()
    {
        Health--;
        if (Health <= 0)
        {
            // Handle boss death
        }
    }
}

// Final Boss
class FinalBoss : Enemy
{
    int Stage;

    void Update(GameTime gameTime)
    {
        // Move in a pattern based on stage
        // Shoot bullets in different patterns based on stage
    }

    void TakeDamage()
    {
        Health--;
        if (Health <= 0)
        {
            // Handle boss death or stage transition
        }
    }
}

// Enemy Factory Class
class EnemyFactory
{
    static Enemy CreateEnemy(string type)
    {
        switch (type)
        {
            case "RegularEnemyA":
                return new RegularEnemyA();
            case "RegularEnemyB":
                return new RegularEnemyB();
            case "FirstBoss":
                return new FirstBoss();
            case "FinalBoss":
                return new FinalBoss();
            default:
                throw new ArgumentException("Invalid enemy type");
        }
    }
}